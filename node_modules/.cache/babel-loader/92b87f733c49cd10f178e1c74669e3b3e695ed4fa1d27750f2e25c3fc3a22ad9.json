{"ast":null,"code":"// Импортируем необходимые функции из Redux\nimport { createSlice } from '@reduxjs/toolkit';\n\n// Создаем слайс для счетчика\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    },\n    decrement: state => {\n      // Обеспечиваем, чтобы значение не стало меньше 0\n      if (state.value > 0) {\n        state.value -= 1;\n      }\n    },\n    incrementByTen: state => {\n      state.value += 10;\n    },\n    decrementByTen: state => {\n      // Обеспечиваем, чтобы значение не стало меньше 0\n      if (state.value >= 10) {\n        state.value -= 10;\n      } else {\n        state.value = 0;\n      }\n    },\n    reset: state => {\n      state.value = 0;\n    }\n  }\n});\n\n// Экспортируем действия для использования в компонентах\nexport const {\n  increment,\n  decrement,\n  incrementByTen,\n  decrementByTen,\n  reset\n} = counterSlice.actions;\n\n// Экспортируем редюсер, который будет использоваться в store\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","counterSlice","name","initialState","value","reducers","increment","state","decrement","incrementByTen","decrementByTen","reset","actions","reducer"],"sources":["C:/Users/vip_AZA/WebstormProjects/month5/lesson1/src/slice/counterSlice.js"],"sourcesContent":["// Импортируем необходимые функции из Redux\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\n// Создаем слайс для счетчика\r\nconst counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: {\r\n        value: 0,\r\n    },\r\n    reducers: {\r\n        increment: (state) => {\r\n            state.value += 1;\r\n        },\r\n        decrement: (state) => {\r\n            // Обеспечиваем, чтобы значение не стало меньше 0\r\n            if (state.value > 0) {\r\n                state.value -= 1;\r\n            }\r\n        },\r\n        incrementByTen: (state) => {\r\n            state.value += 10;\r\n        },\r\n        decrementByTen: (state) => {\r\n            // Обеспечиваем, чтобы значение не стало меньше 0\r\n            if (state.value >= 10) {\r\n                state.value -= 10;\r\n            } else {\r\n                state.value = 0;\r\n            }\r\n        },\r\n        reset: (state) => {\r\n            state.value = 0;\r\n        },\r\n    },\r\n});\r\n\r\n// Экспортируем действия для использования в компонентах\r\nexport const {\r\n    increment,\r\n    decrement,\r\n    incrementByTen,\r\n    decrementByTen,\r\n    reset,\r\n} = counterSlice.actions;\r\n\r\n// Экспортируем редюсер, который будет использоваться в store\r\nexport default counterSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,YAAY,GAAGD,WAAW,CAAC;EAC7BE,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACVC,KAAK,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACNC,SAAS,EAAGC,KAAK,IAAK;MAClBA,KAAK,CAACH,KAAK,IAAI,CAAC;IACpB,CAAC;IACDI,SAAS,EAAGD,KAAK,IAAK;MAClB;MACA,IAAIA,KAAK,CAACH,KAAK,GAAG,CAAC,EAAE;QACjBG,KAAK,CAACH,KAAK,IAAI,CAAC;MACpB;IACJ,CAAC;IACDK,cAAc,EAAGF,KAAK,IAAK;MACvBA,KAAK,CAACH,KAAK,IAAI,EAAE;IACrB,CAAC;IACDM,cAAc,EAAGH,KAAK,IAAK;MACvB;MACA,IAAIA,KAAK,CAACH,KAAK,IAAI,EAAE,EAAE;QACnBG,KAAK,CAACH,KAAK,IAAI,EAAE;MACrB,CAAC,MAAM;QACHG,KAAK,CAACH,KAAK,GAAG,CAAC;MACnB;IACJ,CAAC;IACDO,KAAK,EAAGJ,KAAK,IAAK;MACdA,KAAK,CAACH,KAAK,GAAG,CAAC;IACnB;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EACTE,SAAS;EACTE,SAAS;EACTC,cAAc;EACdC,cAAc;EACdC;AACJ,CAAC,GAAGV,YAAY,CAACW,OAAO;;AAExB;AACA,eAAeX,YAAY,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}